import type { Props, Child, JSXNode } from '../base';
import { memo, isValidElement } from '../base';
import { useContext } from '../context';
import { useState, useEffect, useRef, useCallback, use, startTransition, useTransition, useDeferredValue, startViewTransition, useViewTransition, useMemo, useLayoutEffect, useReducer, useId, useDebugValue } from '../hooks';
import { Suspense, ErrorBoundary } from './components';
import { createContext } from './context';
export { render } from './render';
declare const createElement: (tag: string | ((props: Props) => JSXNode), props: Props, ...children: Child[]) => JSXNode;
declare const cloneElement: <T extends JSXNode | JSX.Element>(element: T, props: Props, ...children: Child[]) => T;
export { createElement as jsx, useState, useEffect, useRef, useCallback, use, startTransition, useTransition, useDeferredValue, startViewTransition, useViewTransition, useMemo, useLayoutEffect, useReducer, useId, useDebugValue, Suspense, ErrorBoundary, createContext, useContext, memo, isValidElement, createElement, cloneElement, };
declare const _default: {
    useState: <T>(initialState: T | (() => T)) => [T, (newState: T | ((currentState: T) => T)) => void];
    useEffect: (effect: () => void | (() => void), deps?: readonly unknown[] | undefined) => void;
    useRef: <T_1>(initialValue: T_1 | null) => import("../hooks").RefObject<T_1>;
    useCallback: <T_2 extends (...args: unknown[]) => unknown>(callback: T_2, deps: readonly unknown[]) => T_2;
    use: <T_3>(promise: Promise<T_3>) => T_3;
    startTransition: (callback: () => void) => void;
    useTransition: () => [boolean, (callback: () => void) => void];
    useDeferredValue: <T_4>(value: T_4) => T_4;
    startViewTransition: (callback: () => void) => void;
    useViewTransition: () => [boolean, (callback: () => void) => void];
    useMemo: <T_5>(factory: () => T_5, deps: readonly unknown[]) => T_5;
    useLayoutEffect: (effect: () => void | (() => void), deps?: readonly unknown[] | undefined) => void;
    useReducer: <T_6, A>(reducer: (state: T_6, action: A) => T_6, initialArg: T_6, init?: ((initialState: T_6) => T_6) | undefined) => [T_6, (action: A) => void];
    useId: () => string;
    useDebugValue: (_value: unknown, _formatter?: ((value: unknown) => string) | undefined) => void;
    Suspense: import("../base").FC<import("..").PropsWithChildren<{
        fallback: any;
    }>>;
    ErrorBoundary: import("../base").FC<import("..").PropsWithChildren<{
        fallback?: Child;
        fallbackRender?: import("../components").FallbackRender | undefined;
        onError?: import("../components").ErrorHandler | undefined;
    }>>;
    createContext: <T_7>(defaultValue: T_7) => import("../context").Context<T_7>;
    useContext: <T_8>(context: import("../context").Context<T_8>) => T_8;
    memo: <T_9>(component: import("../base").FC<T_9>, propsAreEqual?: (prevProps: Readonly<T_9>, nextProps: Readonly<T_9>) => boolean) => import("../base").FC<T_9>;
    isValidElement: (element: unknown) => element is JSXNode;
    createElement: (tag: string | ((props: Props) => JSXNode), props: Props, ...children: Child[]) => JSXNode;
    cloneElement: <T_10 extends JSXNode | JSX.Element>(element: T_10, props: Props, ...children: Child[]) => T_10;
};
export default _default;
export type { Context } from '../context';
